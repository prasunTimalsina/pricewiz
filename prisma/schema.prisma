// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/app/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id         Int              @id @default(autoincrement())
  title      String
  popularity Int              @default(0)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  listings   Listing[]
  queries    ProductQueries[]
}

model Listing {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  platform  String
  title     String
  price     Float
  imageUrl  String?
  url       String
  scrapedAt DateTime @default(now())
  tracks    Track[]

  @@unique([productId, platform, url])
}

model Track {
  id        Int      @id @default(autoincrement())
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  minPrice  Int
  email     String
  prodTitle String
  createdAt DateTime @default(now())
}

model Query {
  id        Int      @id @default(autoincrement())
  query     String
  nextRunAt DateTime
  createdAt DateTime @default(now())

  products ProductQueries[]
}

/// join table for Product <-> Query many-to-many
model ProductQueries {
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  query   Query @relation(fields: [queryId], references: [id])
  queryId Int

  @@id([productId, queryId])
}
